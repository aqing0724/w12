#define ROW1 13
#define ROW2 12
#define ROW3 11
#define ROW4 10
#define ROW5 9
#define ROW6 8
#define ROW7 7
#define ROW8 6

#define COL1 5
#define COL2 4
#define COL3 3
#define COL4 A4
#define COL5 A3
#define COL6 A2
#define COL7 A1
#define COL8 A0

const int row[] = {ROW1, ROW2, ROW3, ROW4, ROW5, ROW6, ROW7, ROW8};
const int col[] = {COL1, COL2, COL3, COL4, COL5, COL6, COL7, COL8};

byte currentPattern = 0; // 0 = circle, 1 = H, 2 = squar
String inputString = "";

byte circle[8][8] = {
  {1,1,0,0,0,0,1,1},
  {1,0,1,1,1,1,0,1},
  {0,1,1,1,1,1,1,0},
  {0,1,1,1,1,1,1,0},
  {0,1,1,1,1,1,1,0},
  {0,1,1,1,1,1,1,0},
  {1,0,1,1,1,1,0,1},
  {1,1,0,0,0,0,1,1}
};

byte H[8][8] = {
  {0,1,1,1,1,1,1,0},
  {0,1,1,1,1,1,1,0},
  {0,1,1,1,1,1,1,0},
  {0,0,0,0,0,0,0,0},
  {0,1,1,1,1,1,1,0},
  {0,1,1,1,1,1,1,0},
  {0,1,1,1,1,1,1,0},
  {0,1,1,1,1,1,1,0}
};

byte squar[8][8] = {
  {0,0,0,0,0,0,0,0},
  {0,1,1,1,1,1,1,0},
  {0,1,1,1,1,1,1,0},
  {0,1,1,1,1,1,1,0},
  {0,1,1,1,1,1,1,0},
  {0,1,1,1,1,1,1,0},
  {0,1,1,1,1,1,1,0},
  {0,0,0,0,0,0,0,0}
};

void setup() {
  Serial.begin(9600);
  Serial.println("輸入 circle、H 或 squar 切換圖案：");

  for (byte i = 0; i < 8; i++) {
    pinMode(row[i], OUTPUT);
    digitalWrite(row[i], HIGH);  // 預設關閉行
  }

  for (byte i = 0; i < 8; i++) {
    pinMode(col[i], OUTPUT);
    digitalWrite(col[i], HIGH);  // 預設關閉列
  }
}

void loop() {
  // 讀取使用者輸入字串
  while (Serial.available()) {
    char c = Serial.read();
    if (c == '\n') {
      inputString.trim(); // 去除換行與空格

      if (inputString == "circle") currentPattern = 0;
      else if (inputString == "H") currentPattern = 1;
      else if (inputString == "squar") currentPattern = 2;
      else Serial.println("指令無效，請輸入 circle、H 或 squar");

      Serial.print("目前顯示圖案：");
      Serial.println(inputString);
      inputString = "";
    } else {
      inputString += c;
    }
  }

  // 顯示目前圖案
  switch (currentPattern) {
    case 0: showPattern(circle); break;
    case 1: showPattern(H); break;
    case 2: showPattern(squar); break;
  }
}

void showPattern(byte matrix[8][8]) {
  for (byte i = 0; i < 8; i++) {
    digitalWrite(row[i], LOW); // 啟用第 i 行
    for (byte j = 0; j < 8; j++) {
      digitalWrite(col[j], matrix[i][j] ? LOW : HIGH); // 點亮對應位置
    }
    delay(1);
    digitalWrite(row[i], HIGH); // 關閉這一行
    for (byte j = 0; j < 8; j++) {
      digitalWrite(col[j], HIGH); // 關閉全部列
    }
  }
}
